env:
  CIRRUS_CLONE_DEPTH: "1"
  CIRRUS_SHELL: bash

  ARTIFACTORY_URL: https://repox.jfrog.io/artifactory
  ARTIFACTORY_PRIVATE_USERNAME: vault-${CIRRUS_REPO_OWNER}-${CIRRUS_REPO_NAME}-private-reader
  ARTIFACTORY_ACCESS_TOKEN: VAULT[development/artifactory/token/${CIRRUS_REPO_OWNER}-${CIRRUS_REPO_NAME}-private-reader access_token]
  ARTIFACTORY_PRIVATE_PASSWORD: VAULT[development/artifactory/token/${CIRRUS_REPO_OWNER}-${CIRRUS_REPO_NAME}-private-reader access_token]
  NPM_CONFIG_//repox.jfrog.io/artifactory/api/npm/:_authToken: VAULT[development/artifactory/token/${CIRRUS_REPO_OWNER}-${CIRRUS_REPO_NAME}-private-reader access_token]
  NPM_CONFIG_registry: https://repox.jfrog.io/artifactory/api/npm/npm

auto_cancellation: $CIRRUS_BRANCH != $CIRRUS_DEFAULT_BRANCH

only_if_with_nightly: &ONLY_IF
  skip: "changesIncludeOnly('README.md')"
  only_if: $CIRRUS_USER_COLLABORATOR == 'true' && $CIRRUS_TAG == ""

only_if_except_nightly: &ONLY_IF_EXCEPT_NIGHTLY
  skip: "changesIncludeOnly('README.md')"
  only_if: $CIRRUS_USER_COLLABORATOR == 'true' && $CIRRUS_TAG == "" && $CIRRUS_BUILD_SOURCE != "cron"

only_if_or_secondary_platform_except_nightly: &ONLY_IF_OR_SECONDARY_PLATFORM_EXCEPT_NIGHTLY
  skip: "changesIncludeOnly('README.md')"
  only_if: ($CIRRUS_USER_COLLABORATOR == 'true' && $CIRRUS_TAG == "" && $CIRRUS_BUILD_SOURCE != "cron") || $CIRRUS_CRON == "secondary-platform"

only_pr_and_maintained_branches: &ONLY_PR_AND_MAINTAINED_BRANCHES
  skip: "changesIncludeOnly('README.md')"
  only_if: $CIRRUS_USER_COLLABORATOR == 'true' && $CIRRUS_TAG == "" && $CIRRUS_BUILD_SOURCE != "cron"
    && ($CIRRUS_PR != "" || $CIRRUS_BRANCH == $CIRRUS_DEFAULT_BRANCH || $CIRRUS_BRANCH =~ "branch-.*" || $CIRRUS_BRANCH =~ "dogfood-on-.*")

only_main_branches: &ONLY_MAIN_BRANCHES
  skip: "changesIncludeOnly('README.md')"
  only_if: $CIRRUS_USER_COLLABORATOR == 'true' && $CIRRUS_TAG == "" && ($CIRRUS_BRANCH == $CIRRUS_DEFAULT_BRANCH || $CIRRUS_BRANCH =~ "branch-.*") && $CIRRUS_CRON != "secondary-platform"

container_definition: &CONTAINER_DEFINITION
  image: ${CIRRUS_AWS_ACCOUNT}.dkr.ecr.eu-central-1.amazonaws.com/base:j17-latest
  region: eu-central-1
  cluster_name: ${CIRRUS_CLUSTER_NAME}
  namespace: default
  cpu: 6
  memory: 10G

ec2_instance_definition: &WINVM_DEFINITION
  experimental: true
  image: base-windows-jdk17-v*
  platform: windows
  region: eu-central-1
  type: c6i.xlarge

maven_cache: &MAVEN_CACHE
  maven_cache:
    folder: ${CIRRUS_WORKING_DIR}/.m2/repository
    fingerprint_script:
      - cat pom.xml

build_task:
  # name: "Build and stage to repox"
  # alias: build
  <<: *ONLY_IF
  eks_container:
    <<: *CONTAINER_DEFINITION
  env:
    ARTIFACTORY_DEPLOY_REPO: sonarsource-public-qa
    ARTIFACTORY_DEPLOY_USERNAME: vault-${CIRRUS_REPO_OWNER}-${CIRRUS_REPO_NAME}-qa-deployer
    ARTIFACTORY_DEPLOY_PASSWORD: VAULT[development/artifactory/token/${CIRRUS_REPO_OWNER}-${CIRRUS_REPO_NAME}-qa-deployer access_token]
    SIGN_KEY: VAULT[development/kv/data/sign data.key]
    PGP_PASSPHRASE: VAULT[development/kv/data/sign data.passphrase]
    DEPLOY_PULL_REQUEST: true
    SONAR_HOST_URL: VAULT[development/kv/data/next data.url]
    SONAR_TOKEN: VAULT[development/kv/data/next data.token]
  <<: *MAVEN_CACHE
  build_script:
    - source cirrus-env BUILD-PRIVATE
    - regular_mvn_build_deploy_analyze -Dmaven.test.skip=true -Dsonar.skip=true
  cleanup_before_cache_script: cleanup_maven_repository

qa_linux_task:
  # name: "Run unit tests on Linux with Java 17 and SonarQube analysis on Next"
  # alias: qa_linux
  depends_on:
    - build
  <<: *ONLY_IF_OR_SECONDARY_PLATFORM_EXCEPT_NIGHTLY
  eks_container:
    <<: *CONTAINER_DEFINITION
  env:
    DEPLOY_PULL_REQUEST: false
    SONAR_HOST_URL: VAULT[development/kv/data/next data.url]
    SONAR_TOKEN: VAULT[development/kv/data/next data.token]
  <<: *MAVEN_CACHE
  qa_script:
    - source cirrus-env QA
    - PULL_REQUEST_SHA=$GIT_SHA1 regular_mvn_build_deploy_analyze -P-deploy-sonarsource,-release,-sign -Dcommercial -Dmaven.install.skip=true -Dmaven.deploy.skip=true
  cleanup_before_cache_script: cleanup_maven_repository
  on_failure:
    junit_artifacts:
      path: '**/target/surefire-reports/TEST-*.xml'
      format: junit

sonarqube_eu_analysis_task:
  # name: "Run unit tests on Linux with Java 17 and SonarQube analysis on Next"
  # alias: qa_linux
  depends_on:
    - build
  only_if: $CIRRUS_CRON == "secondary-platform"
  eks_container:
    <<: *CONTAINER_DEFINITION
  env:
    DEPLOY_PULL_REQUEST: false
    SONAR_HOST_URL: VAULT[development/kv/data/sonarcloud data.url]
    SONAR_TOKEN: VAULT[development/kv/data/sonarcloud data.token]
  <<: *MAVEN_CACHE
  qa_script:
    - source cirrus-env QA
    - PULL_REQUEST_SHA=$GIT_SHA1 regular_mvn_build_deploy_analyze -P-deploy-sonarsource,-release,-sign -Dcommercial -Dmaven.install.skip=true -Dmaven.deploy.skip=true -Dsonar.organization=sonarsource -Dsonar.projectKey=SonarSource_sonarlint-language-server
  cleanup_before_cache_script: cleanup_maven_repository
  on_failure:
    junit_artifacts:
      path: '**/target/surefire-reports/TEST-*.xml'
      format: junit

sonarqube_us_analysis_task:
  # name: "Run unit tests on Linux with Java 17 and SonarQube analysis on Next"
  # alias: qa_linux
  depends_on:
    - build
  only_if: $CIRRUS_CRON == "secondary-platform"
  eks_container:
    <<: *CONTAINER_DEFINITION
  env:
    DEPLOY_PULL_REQUEST: false
    SONAR_HOST_URL: VAULT[development/kv/data/sonarqube-us data.url]
    SONAR_TOKEN: VAULT[development/kv/data/sonarqube-us data.token]
  <<: *MAVEN_CACHE
  qa_script:
    - source cirrus-env QA
    - PULL_REQUEST_SHA=$GIT_SHA1 regular_mvn_build_deploy_analyze -P-deploy-sonarsource,-release,-sign -Dcommercial -Dmaven.install.skip=true -Dmaven.deploy.skip=true -Dsonar.organization=sonarsource -Dsonar.projectKey=SonarSource_sonarlint-language-server
  cleanup_before_cache_script: cleanup_maven_repository
  on_failure:
    junit_artifacts:
      path: '**/target/surefire-reports/TEST-*.xml'
      format: junit

run_iris_task:
  only_if: $CIRRUS_CRON == "secondary-platform"
  depends_on:
    - qa_linux
    - sonarqube_us_analysis
    - sonarqube_eu_analysis
  eks_container:
    <<: *CONTAINER_DEFINITION
  env:
    SONAR_SQC_EU_URL: VAULT[development/kv/data/sonarcloud data.url]
    SONAR_SQC_US_URL: VAULT[development/kv/data/sonarqube-us data.url]
    SONAR_NEXT_URL: VAULT[development/kv/data/next data.url]
    SONAR_IRIS_NEXT_TOKEN: VAULT[development/kv/data/iris data.next]
    SONAR_IRIS_SQC_EU_TOKEN: VAULT[development/kv/data/iris data.sqc-eu]
    SONAR_IRIS_SQC_US_TOKEN: VAULT[development/kv/data/iris data.sqc-us]
    ARTIFACTORY_USERNAME: VAULT[development/artifactory/token/${CIRRUS_REPO_OWNER}-${CIRRUS_REPO_NAME}-private-reader username]
    ARTIFACTORY_ACCESS_TOKEN: VAULT[development/artifactory/token/${CIRRUS_REPO_OWNER}-${CIRRUS_REPO_NAME}-private-reader access_token]
  iris_script: |
    chmod +x .cirrus/run-iris.sh
    .cirrus/run-iris.sh

qa_windows_task:
  # name: "Run unit tests on Windows with Java 17"
  # alias: qa_windows
  depends_on:
    - build
  <<: *ONLY_IF_EXCEPT_NIGHTLY
  ec2_instance:
    <<: *WINVM_DEFINITION
  <<: *MAVEN_CACHE
  qa_script:
    - source cirrus-env QA
    - source set_maven_build_version $BUILD_NUMBER
    - mvn -B -e -V verify -Dcommercial -Dmaven.test.redirectTestOutputToFile=false
  cleanup_before_cache_script: cleanup_maven_repository
  on_failure:
    junit_artifacts:
      path: '**/target/surefire-reports/TEST-*.xml'
      format: junit

mend_scan_task:
  # name: "Mend scan"
  # alias: mend_scan
  depends_on:
    - build
  <<: *ONLY_MAIN_BRANCHES
  eks_container:
    <<: *CONTAINER_DEFINITION
    cpu: 4
    memory: 2G
  env:
    WS_APIKEY: VAULT[development/kv/data/mend data.apikey]
  <<: *MAVEN_CACHE
  mend_script:
    - source cirrus-env QA
    - source set_maven_build_version $BUILD_NUMBER
    - mvn clean install -DskipTests
    - source ws_scan.sh
  cleanup_before_cache_script: cleanup_maven_repository
  allow_failures: "true"
  always:
    ws_scan_artifacts:
      path: "whitesource/**/*"

promote_task:
  depends_on:
    - build
    - qa_linux
    - qa_windows
    - mend_scan
  <<: *ONLY_PR_AND_MAINTAINED_BRANCHES
  eks_container:
    <<: *CONTAINER_DEFINITION
    cpu: 0.5
    memory: 500M
  env:
    ARTIFACTORY_PROMOTE_ACCESS_TOKEN: VAULT[development/artifactory/token/${CIRRUS_REPO_OWNER}-${CIRRUS_REPO_NAME}-promoter access_token]
    GITHUB_TOKEN: VAULT[development/github/token/${CIRRUS_REPO_OWNER}-${CIRRUS_REPO_NAME}-promotion token]
  <<: *MAVEN_CACHE
  promote_script: cirrus_promote_maven
  cleanup_before_cache_script: cleanup_maven_repository
