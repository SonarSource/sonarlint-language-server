/*
 * SonarLint Language Server
 * Copyright (C) 2009-2024 SonarSource SA
 * mailto:info AT sonarsource DOT com
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 */
package org.sonarsource.sonarlint.ls.connected.notifications;

import com.google.gson.JsonPrimitive;
import java.time.Instant;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.CompletableFuture;
import org.awaitility.core.ThrowingRunnable;
import org.eclipse.lsp4j.ExecuteCommandParams;
import org.junit.jupiter.api.Test;
import org.sonarsource.sonarlint.core.commons.IssueSeverity;
import org.sonarsource.sonarlint.core.commons.RuleType;
import org.sonarsource.sonarlint.core.serverapi.push.TaintVulnerabilityRaisedEvent;
import org.sonarsource.sonarlint.ls.CommandManager;
import org.sonarsource.sonarlint.ls.SonarLintExtendedLanguageClient;

import static java.util.concurrent.TimeUnit.MINUTES;
import static org.awaitility.Awaitility.await;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.eq;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.never;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;
import static org.sonarsource.sonarlint.ls.connected.notifications.TaintVulnerabilityRaisedNotification.SETTINGS_ACTION;
import static org.sonarsource.sonarlint.ls.connected.notifications.TaintVulnerabilityRaisedNotification.SHOW_ISSUE_ACTION;
import static org.sonarsource.sonarlint.ls.connected.notifications.TaintVulnerabilityRaisedNotification.SONARLINT_SHOW_TAINT_VULNERABILITY_FLOWS;

class TaintVulnerabilityRaisedNotificationTests {
  private final SonarLintExtendedLanguageClient client = mock(SonarLintExtendedLanguageClient.class);
  private final CommandManager commandManager = mock(CommandManager.class);
  private final TaintVulnerabilityRaisedNotification taintVulnerabilityRaisedNotification = new TaintVulnerabilityRaisedNotification(client, commandManager);
  private final String CONNECTION_ID = "testConnectionId";
  private static final String PROJECT_KEY = "myProject";
  private static final String CURRENT_BRANCH_NAME = "currentBranch";
  private static final String ISSUE_KEY2 = "TEST_ISSUE_KEY2";
  private static final Instant CREATION_DATE = Instant.now();
  private static final String RULE_KEY = "javasecurity:S3649";
  private static final IssueSeverity ISSUE_SEVERITY = IssueSeverity.BLOCKER;
  private static final RuleType RULE_TYPE = RuleType.VULNERABILITY;
  private static TaintVulnerabilityRaisedEvent.Location MAIN_LOCATION = new TaintVulnerabilityRaisedEvent.Location("fileInAWorkspaceFolderPath",
    "Change this code to not construct SQL queries directly from user-controlled data.",
    new TaintVulnerabilityRaisedEvent.Location.TextRange(1, 2, 3, 4, "blablabla"));;
  private static final List<TaintVulnerabilityRaisedEvent.Flow> FLOWS = new ArrayList<>();
  TaintVulnerabilityRaisedEvent fakeEvent = new TaintVulnerabilityRaisedEvent(ISSUE_KEY2, PROJECT_KEY, CURRENT_BRANCH_NAME, CREATION_DATE, RULE_KEY,
    ISSUE_SEVERITY, RULE_TYPE, MAIN_LOCATION, FLOWS, null, null, null);

  @Test
  void shouldCallShowTaintCommandWhenShowIssueActionSelected() {
    when(client.showMessageRequest(any())).thenReturn(CompletableFuture.completedFuture(SHOW_ISSUE_ACTION));

    taintVulnerabilityRaisedNotification.showTaintVulnerabilityNotification(fakeEvent, CONNECTION_ID, false);
    ExecuteCommandParams expectedCommandParams = new ExecuteCommandParams(SONARLINT_SHOW_TAINT_VULNERABILITY_FLOWS, List.of(new JsonPrimitive(ISSUE_KEY2), new JsonPrimitive(CONNECTION_ID)));

    awaitUntilAsserted(() -> verify(commandManager, times(1)).executeCommand(eq(expectedCommandParams), any()));
  }

  @Test
  void shouldCallOpenSettingsWhenSettingsActionSelected() {
    when(client.showMessageRequest(any())).thenReturn(CompletableFuture.completedFuture(SETTINGS_ACTION));

    taintVulnerabilityRaisedNotification.showTaintVulnerabilityNotification(fakeEvent, CONNECTION_ID, false);

    verify(client, times(1)).openConnectionSettings(false);
  }

  @Test
  void shouldDoNothingWhenNoActionSelected() {
    when(client.showMessageRequest(any())).thenReturn(CompletableFuture.completedFuture(null));

    taintVulnerabilityRaisedNotification.showTaintVulnerabilityNotification(fakeEvent, CONNECTION_ID, false);

    verify(client, never()).openConnectionSettings(any(boolean.class));
    verify(commandManager, never()).executeCommand(any(ExecuteCommandParams.class), any());
  }

  protected void awaitUntilAsserted(ThrowingRunnable assertion) {
    await().atMost(2, MINUTES).untilAsserted(assertion);
  }
}
